<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUAVVVVAFVV
        VQBVVVUAVVVVAFZVVQBWVVUAVVVVAFVVVQBVVVUAVVVVAFVVVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUAalpUAGJYVABvXlgAdmReAHpn
        YQB8amMAfmxjAH1qZgCBbGoAhXRqAIV0agCCbGsAfWpmAH5sYwB9amMAemdhAHdkXgBwX1gAZFhUAG5c
        VQBVVVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVAH9iXwBxXVoAMzQxAGtb
        VQBzYFsBdWNcAXZjXQF3ZFwCdmJgAnFgYAJ2aF8Cd2leAnFgYAJ2YmACd2RcAnZkXQF1Y10Bc2FbAWxc
        VQBHQz4Ac19bAJFsZgBVVVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdVFMAcVxaAGxa
        WAB1Y10CdmVfBXloYgd6aWMJeWljC3lpYwx6amMNeGhjDXloZQ15aWUNeGhjDXlqYg15aWMMeWljC3pp
        Ywl5aGIHdmVfBXVjXgJtW1kAdV5bAGVUUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtU
        VAAAAAAAcmFcAnhnYgZ6aWMNeWlkFHpqZBl6amQdempkIHpqZCF6amQiempkI3pqZCN6amQiempkIXpq
        ZCB6amQdempkGnlpZBV6aWMOeWdiB3NhXQI8Oj4AXlVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOe3cQDqqSoA57VrAOizYgDnsFYA5qxLAOWnQgDjojgA4JsvAN2VKgDWiiUA25IpAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////wD//8AAA/+AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP+AAAD/gA
        AB/wAAAP8AAAB+AAAAfgAAADwAAAA8AAAAPAAAADwAAAA+AAAAPgAAAH8AAAB/AAAA/4AAAf/AAAP/8A
        AP//wAP///////////////////////////8=
</value>
  </data>
</root>